import subprocess, os, sys

def load_file(fname, path = ''):
    with open(path + fname, "rb") as f:
        return bytearray(f.read())

def save_file(fname, data, path = ''):
    with open(path + fname, "wb") as f:
        f.write(str(data))

def run(executable):
    process = subprocess.Popen(
        ["gdb", "--batch", "-x", main_dir + "detect.gdb", executable],
        stdout = subprocess.PIPE,
        stderr = None
    ) 
    output, _ = process.communicate()

    if "Program received signal" in output:
        return output.split("randomseparatorlol")[1]
    return None

if __name__ == "__main__":
    if '.py' in sys.argv[-1]:
        print "Executable name missing in argument."
        quit()

    executable = './' + sys.argv[-1]

    main_dir = os.getcwd() + '/exploitable_files/'
    crashes_dir = os.getcwd() + '/exploitable_files/crashes/'
    afl_crashes_dir = os.getcwd() + '/out/crashes/'

    if not os.path.exists(main_dir):
        os.mkdir(main_dir)

    if not os.path.exists(crashes_dir):
        os.mkdir(crashes_dir)

    gdbscript = open(main_dir + 'detect.gdb', 'w')
    gdbscript.write(
        'set height 0\n'
        'printf "randomseparatorlol"\n'
        'r < exploitable_files/test.sample'
    )
    gdbscript.close()

    files = os.listdir(afl_crashes_dir)
    for f in files:
        sys.stdout.write(".")
        sys.stdout.flush()

        data = load_file(f, afl_crashes_dir)   
        save_file('test.sample', data, main_dir)
        
        output = run(executable)
        if output is not None:
            print "CRASH"
            save_file(f, data, crashes_dir)